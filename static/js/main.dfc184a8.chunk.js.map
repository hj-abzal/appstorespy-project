{"version":3,"sources":["components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Tasks/tasks-reducer.ts","features/Tasks/Task.tsx","features/Todolists/todolist-reducer.ts","features/Todolists/Todolist.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","utils/localStorage.ts","index.tsx"],"names":["AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","initialState","Task","dispatch","useDispatch","console","log","task","className","isDone","Checkbox","checked","taskId","todolistId","id","type","changeTaskTitleAC","Delete","changeTodolistFilterAC","filter","Todolist","changeTodolistTitleAC","addTaskAC","tasks","map","t","style","paddingTop","Button","App","todolists","useSelector","state","addTodolist","useCallback","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","allTodolistTasks","tasksForTodolist","item","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","newTasks","newTask","todolistTasks","find","copyState","tl","todolist","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfc184a8.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import { v1 } from 'uuid';\r\nimport { AddTodolistActionType, RemoveTodolistActionType } from '../Todolists/todolist-reducer';\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state }\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return ({ ...state });\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId }\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', title, todolistId }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', title, todolistId, taskId }\r\n}\r\n\r\n","import { Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { EditableSpan } from '../../components/EditableSpan/EditableSpan';\r\nimport { changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, TaskType } from './tasks-reducer';\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = (props: TaskPropsType) => {\r\n    const dispatch = useDispatch();\r\n    console.log(props.task);\r\n    \r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusAC(props.task.id, e.currentTarget.checked, props.todolistId))\r\n    }\r\n\r\n    const onTitleChangeHandler = (title: string) => {\r\n        dispatch(changeTaskTitleAC(props.task.id, title, props.todolistId))\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(removeTaskAC(props.task.id, props.todolistId))\r\n    }\r\n\r\n    return <div className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n}\r\n\r\n","import {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import { Button, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\r\nimport { EditableSpan } from '../../components/EditableSpan/EditableSpan';\r\nimport { Task } from '../Tasks/Task';\r\nimport { addTaskAC, TaskType } from '../Tasks/tasks-reducer';\r\nimport { changeTodolistFilterAC, changeTodolistTitleAC, FilterValuesType, removeTodolistAC } from './todolist-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskAC(title, props.id))\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        dispatch(removeTodolistAC(props.id))\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        dispatch(changeTodolistTitleAC(props.id, title))\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        dispatch(changeTodolistFilterAC(props.id, 'all'))\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        dispatch(changeTodolistFilterAC(props.id, \"active\"))\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        dispatch(changeTodolistFilterAC(props.id, \"completed\"))\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} />\r\n        <div>\r\n            {\r\n                props.tasks.map(t => <Task key={t.id} task={t} todolistId={props.id} />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import { AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AddItemForm } from '../components/AddItemForm/AddItemForm';\r\nimport { TasksStateType } from '../features/Tasks/tasks-reducer';\r\nimport { Todolist } from '../features/Todolists/Todolist';\r\nimport { addTodolistAC, TodolistType } from '../features/Todolists/todolist-reducer';\r\nimport './App.css';\r\nimport { AppRootStateType } from './store';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const todolists = useSelector<AppRootStateType, TodolistType[]>(state => state.todolists);\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n  const addTodolist = useCallback((title: string) => {\r\n    dispatch(addTodolistAC(title))\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            AppStoreSpy\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Grid container style={{ padding: '20px' }}>\r\n          <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {\r\n            todolists.map(t => {\r\n              let allTodolistTasks = tasks[t.id];\r\n              let tasksForTodolist = allTodolistTasks;\r\n\r\n              if (t.filter === \"active\") {\r\n                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n              }\r\n              if (t.filter === \"completed\") {\r\n                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n              }\r\n              return <Grid item key={t.id}>\r\n                <Paper style={{ padding: '15px' }}>\r\n                  <Todolist\r\n                    id={t.id}\r\n                    title={t.title}\r\n                    tasks={tasksForTodolist}\r\n                    filter={t.filter}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            })\r\n          }\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\r\nimport { tasksReducer } from '../features/Tasks/tasks-reducer';\r\nimport { todolistsReducer } from '../features/Todolists/todolist-reducer';\r\nimport { loadState, saveState } from '../utils/localStorage';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState());\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        tasks: store.getState().tasks,\r\n        todolists: store.getState().todolists\r\n    })\r\n  })\r\n","import { AppRootStateType } from './../app/store';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('app-state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport const saveState = (state: AppRootStateType) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('app-state', serializedState)\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}